//Doubly Linked List class with a Node inner class

public class DLinkedList<E> implements LinkedList<E>
{
    // instance variables - replace the example below with your own
    private Node<E> head;
    private int size = 0;

    /**
     * Constructor for objects of class DLinkedList
     */
    public DLinkedList()
    {
        this.head = null;
    }

    public static void main(String[] args){
        DLinkedList<Person> list = new DLinkedList<>();
        list.add(0, new Person("John", "Henderson", 10));
        list.addLast(new Person("Deb", "Johnson", 5));
        list.addLast(new Person("Robbie", "Ziff", 20));
        list.addLast(new Person("Quincy", "Sen", 6));
        list.delete(1);
        for(int i=0; i < list.size(); i++){
            System.out.println(list.get(i).toString());
        }
    }

    //Add a Node at a specific index
    public void add(int index, E data){
        if(index < 0 || index > size){
            throw new IndexOutOfBoundsException();
        }

        if(index == 0){
            addFirst(data);
        }
        else if(index == size){
            addLast(data);
        }
        else{
            var temp = new Node(data);
            var currentNode = getNode(index -1);

            var nextNode = currentNode.getNext();
            temp.setPrev(currentNode);
            temp.setNext(nextNode);
            currentNode.setNext(temp);
            nextNode.setPrev(temp);
            size += 1;
        }

    }
    
    private Node<E> getNode(int index){
        var currentNode = head;
        int i = 0;
        while(i != index){
            currentNode = currentNode.getNext();
            i += 1;
        }
        return currentNode;
    }

    //Adds Node to the beginning of the doubly linked list
    public void addFirst(E data){
        var temp = new Node(data);
        if(head == null){
            head = temp;
        }
        else{
            var lastNode = head.getPrev();
            lastNode.setNext(temp);
            temp.setNext(head);
            head.setPrev(temp);
            temp.setPrev(head.getPrev());
            head = temp;
        }
        size += 1;
    }

    public void addLast(E data){
        var temp = new Node(data);
        if(head == null){
            head = temp;
        }
        else if(head != null){
            var lastNode = head.getPrev();
            temp.setPrev(lastNode);
            lastNode.setNext(temp);
            temp.setNext(head);
            head.setPrev(temp);
        }
        size += 1;
    }

    //Returns the size of the DLinkedList
    public int size(){
        return size;
    }

    //Gets the data from the Node at the given index
    public E get(int index){
        var currentNode = head;
        int i = 0;
        if(index < 0 || index >= size()){
            throw new IndexOutOfBoundsException("Index " + index + 
                " is out of bounds!");
        }
        else{
            while(i < index){
                currentNode = currentNode.getNext();
                i += 1;
            }
        }
        return currentNode.getData();
    }

    //Gets the data from the first Node
    public E getFirst(){
        if(head == null){
            throw new IndexOutOfBoundsException();
        }
        return head.getData();
    }

    //Gets the data from the last Node
    public E getLast(){
        if(head == null){
            throw new IndexOutOfBoundsException();
        }
        return head.getPrev().getData();
    }

    //Deletes Node at given index, moves prev and next pointers
    public void delete(int index){
        var currentNode = head;
        int i = 0;
        if(index == 0){
            deleteFirst();
        }
        else if(index > 0){
            while(i < index){
                currentNode = currentNode.getNext();
                i += 1;
            }
            if(currentNode.getNext() != currentNode){
                var prevNode = currentNode.getPrev();
                var nextNode = currentNode.getNext();
                prevNode.setNext(nextNode);
                nextNode.setPrev(prevNode);
            }
            else{
                deleteLast();
            }
        }
        size -= 1;
    }

    public void deleteFirst(){
        var lastNode = head.getPrev();
        var newHead = head.getNext();
        lastNode.setNext(newHead);
        newHead.setPrev(lastNode);
        head = newHead;
        size -= 1;
    }

    public void deleteLast(){
        var lastNode = head.getPrev();
        var newLast = lastNode.getPrev();
        newLast.setNext(head);
        head.setPrev(newLast);
        size -= 1;
    }

    public static class Node<E>
    {
        // instance variables - replace the example below with your own
        private Node<E> next;
        private Node<E> prev;
        private E data;

        /**
         * Constructor for objects of class Node
         */
        public Node(E data)
        {
            this.next = this;
            this.prev = this;
            this.data = data;
        }

        private Node<E> getNext(){
            return next;
        }

        private Node<E> getPrev(){
            return prev;
        }

        private E getData(){
            return data;
        }

        private void setNext(Node newNode){
            this.next = newNode;
        }

        private void setPrev(Node newNode){
            this.prev = newNode;
        }
    }
}

//Linked List interface

public interface LinkedList<E>
{
    /**
     * An example of a method header - replace this comment with your own
     *
     * @param  y a sample parameter for a method
     * @return   the result produced by sampleMethod
     */
    
    void add(int index, E data);
    
    void addFirst(E e);
    
    void addLast(E e);
    
    void delete(int index);
    
    void deleteFirst();
    
    void deleteLast();
    
    int size();

}

//Unit tests


import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * The test class DLinkedListTest.
 *
 * @author  (your name)
 * @version (a version number or a date)
 */
public class DLinkedListTest
{
    DLinkedList<Person> list = new DLinkedList<Person>();
    
    /**
     * Default constructor for test class DLinkedListTest
     */
    public DLinkedListTest()
    {
        DLinkedList<Person> list = new DLinkedList<Person>();
    }
    
    @Test
    public void testAddFirst(){
        Person jeff = new Person("Jeff", "Jon", 25);
        list.addFirst(jeff);
        assertEquals(list.getFirst(), jeff);
    }

    @Test
    public void testAddLast(){
        Person jeff = new Person("Jeff", "Jeffson", 2);
        list.addLast(jeff);
        assertEquals(list.getLast(), jeff);
    }
    
    @Test
    public void testRemoveFirst(){
        Person jeff = new Person("Jeff", "Jefferson", 33);
        Person jorf = new Person("Jorf", "Jefferson", 7);
        list.addFirst(jeff);
        list.addFirst(jorf);
        list.deleteFirst();
        assertEquals(list.getFirst(), jeff);
    }
    
    @Test
    public void testRemoveLast(){
        Person jeff = new Person("Jeff", "Jefferson", 33);
        Person jorf = new Person("Jorf", "Jefferson", 7);
        list.addFirst(jeff);
        list.addFirst(jorf);
        list.deleteLast();
        assertEquals(list.getFirst(), jorf);
    }

}
